# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
  total: Int!
  page: Int!
  pageSize: Int!
  pageCount: Int!
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

input IDFilterInput {
  and: [ID]
  or: [ID]
  not: IDFilterInput
  eq: ID
  ne: ID
  startsWith: ID
  endsWith: ID
  contains: ID
  notContains: ID
  containsi: ID
  notContainsi: ID
  gt: ID
  gte: ID
  lt: ID
  lte: ID
  null: Boolean
  notNull: Boolean
  in: [ID]
  notIn: [ID]
  between: [ID]
}

input BooleanFilterInput {
  and: [Boolean]
  or: [Boolean]
  not: BooleanFilterInput
  eq: Boolean
  ne: Boolean
  startsWith: Boolean
  endsWith: Boolean
  contains: Boolean
  notContains: Boolean
  containsi: Boolean
  notContainsi: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  null: Boolean
  notNull: Boolean
  in: [Boolean]
  notIn: [Boolean]
  between: [Boolean]
}

input StringFilterInput {
  and: [String]
  or: [String]
  not: StringFilterInput
  eq: String
  ne: String
  startsWith: String
  endsWith: String
  contains: String
  notContains: String
  containsi: String
  notContainsi: String
  gt: String
  gte: String
  lt: String
  lte: String
  null: Boolean
  notNull: Boolean
  in: [String]
  notIn: [String]
  between: [String]
}

input IntFilterInput {
  and: [Int]
  or: [Int]
  not: IntFilterInput
  eq: Int
  ne: Int
  startsWith: Int
  endsWith: Int
  contains: Int
  notContains: Int
  containsi: Int
  notContainsi: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  null: Boolean
  notNull: Boolean
  in: [Int]
  notIn: [Int]
  between: [Int]
}

input FloatFilterInput {
  and: [Float]
  or: [Float]
  not: FloatFilterInput
  eq: Float
  ne: Float
  startsWith: Float
  endsWith: Float
  contains: Float
  notContains: Float
  containsi: Float
  notContainsi: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  null: Boolean
  notNull: Boolean
  in: [Float]
  notIn: [Float]
  between: [Float]
}

input DateTimeFilterInput {
  and: [DateTime]
  or: [DateTime]
  not: DateTimeFilterInput
  eq: DateTime
  ne: DateTime
  startsWith: DateTime
  endsWith: DateTime
  contains: DateTime
  notContains: DateTime
  containsi: DateTime
  notContainsi: DateTime
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
  null: Boolean
  notNull: Boolean
  in: [DateTime]
  notIn: [DateTime]
  between: [DateTime]
}

input JSONFilterInput {
  and: [JSON]
  or: [JSON]
  not: JSONFilterInput
  eq: JSON
  ne: JSON
  startsWith: JSON
  endsWith: JSON
  contains: JSON
  notContains: JSON
  containsi: JSON
  notContainsi: JSON
  gt: JSON
  gte: JSON
  lt: JSON
  lte: JSON
  null: Boolean
  notNull: Boolean
  in: [JSON]
  notIn: [JSON]
  between: [JSON]
}

input ComponentJobsDescriptionBulletFiltersInput {
  bullet: StringFilterInput
  and: [ComponentJobsDescriptionBulletFiltersInput]
  or: [ComponentJobsDescriptionBulletFiltersInput]
  not: ComponentJobsDescriptionBulletFiltersInput
}

input ComponentJobsDescriptionBulletInput {
  id: ID
  bullet: String
}

type ComponentJobsDescriptionBullet {
  id: ID!
  bullet: String!
}

input ComponentJobsJobDateFiltersInput {
  month: StringFilterInput
  year: StringFilterInput
  and: [ComponentJobsJobDateFiltersInput]
  or: [ComponentJobsJobDateFiltersInput]
  not: ComponentJobsJobDateFiltersInput
}

input ComponentJobsJobDateInput {
  id: ID
  month: String
  year: String
}

type ComponentJobsJobDate {
  id: ID!
  month: String!
  year: String!
}

input UploadFileFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  alternativeText: StringFilterInput
  caption: StringFilterInput
  width: IntFilterInput
  height: IntFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  ext: StringFilterInput
  mime: StringFilterInput
  size: FloatFilterInput
  url: StringFilterInput
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UploadFileFiltersInput]
  or: [UploadFileFiltersInput]
  not: UploadFileFiltersInput
}

input UploadFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
}

type UploadFile {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  createdAt: DateTime
  updatedAt: DateTime
}

type UploadFileEntity {
  id: ID
  attributes: UploadFile
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [I18NLocaleFiltersInput]
  or: [I18NLocaleFiltersInput]
  not: I18NLocaleFiltersInput
}

type I18NLocale {
  name: String
  code: String
  createdAt: DateTime
  updatedAt: DateTime
}

type I18NLocaleEntity {
  id: ID
  attributes: I18NLocale
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  id: IDFilterInput
  action: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  or: [UsersPermissionsPermissionFiltersInput]
  not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
  action: String!
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  id: ID
  attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
  id: IDFilterInput
  name: StringFilterInput
  description: StringFilterInput
  type: StringFilterInput
  permissions: UsersPermissionsPermissionFiltersInput
  users: UsersPermissionsUserFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsRoleFiltersInput]
  or: [UsersPermissionsRoleFiltersInput]
  not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

type UsersPermissionsRole {
  name: String!
  description: String
  type: String
  permissions(
    filters: UsersPermissionsPermissionFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsPermissionRelationResponseCollection
  users(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserRelationResponseCollection
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
  id: ID
  attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  id: IDFilterInput
  username: StringFilterInput
  email: StringFilterInput
  provider: StringFilterInput
  password: StringFilterInput
  resetPasswordToken: StringFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  blocked: BooleanFilterInput
  role: UsersPermissionsRoleFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [UsersPermissionsUserFiltersInput]
  or: [UsersPermissionsUserFiltersInput]
  not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsUser {
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRoleEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type UsersPermissionsUserEntity {
  id: ID
  attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

input ArticleFiltersInput {
  id: IDFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  content: StringFilterInput
  tags: TagFiltersInput
  thumbnail: ArticleThumbnailFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ArticleFiltersInput]
  or: [ArticleFiltersInput]
  not: ArticleFiltersInput
}

input ArticleInput {
  slug: String
  title: String
  content: String
  tags: [ID]
  thumbnail: ID
}

type Article {
  slug: String!
  title: String!
  content: String
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  thumbnail: ArticleThumbnailEntityResponse
  createdAt: DateTime
  updatedAt: DateTime
}

type ArticleEntity {
  id: ID
  attributes: Article
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleThumbnailFiltersInput {
  id: IDFilterInput
  authorName: StringFilterInput
  authorLink: StringFilterInput
  platformName: StringFilterInput
  platformLink: StringFilterInput
  name: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ArticleThumbnailFiltersInput]
  or: [ArticleThumbnailFiltersInput]
  not: ArticleThumbnailFiltersInput
}

input ArticleThumbnailInput {
  image: ID
  authorName: String
  authorLink: String
  platformName: String
  platformLink: String
  name: String
}

type ArticleThumbnail {
  image: UploadFileEntityResponse!
  authorName: String!
  authorLink: String!
  platformName: String!
  platformLink: String!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type ArticleThumbnailEntity {
  id: ID
  attributes: ArticleThumbnail
}

type ArticleThumbnailEntityResponse {
  data: ArticleThumbnailEntity
}

type ArticleThumbnailEntityResponseCollection {
  data: [ArticleThumbnailEntity!]!
  meta: ResponseCollectionMeta!
}

input AssetFiltersInput {
  id: IDFilterInput
  artist: StringFilterInput
  assetSlug: StringFilterInput
  assetId: IntFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [AssetFiltersInput]
  or: [AssetFiltersInput]
  not: AssetFiltersInput
}

input AssetInput {
  artist: String
  media: ID
  assetSlug: String
  assetId: Int
}

type Asset {
  artist: String
  media: UploadFileEntityResponse!
  assetSlug: String!
  assetId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

type AssetEntity {
  id: ID
  attributes: Asset
}

type AssetEntityResponse {
  data: AssetEntity
}

type AssetEntityResponseCollection {
  data: [AssetEntity!]!
  meta: ResponseCollectionMeta!
}

type AssetRelationResponseCollection {
  data: [AssetEntity!]!
}

input JobFiltersInput {
  id: IDFilterInput
  jobId: StringFilterInput
  companyName: StringFilterInput
  companyPageUrl: StringFilterInput
  position: StringFilterInput
  location: StringFilterInput
  startDate: ComponentJobsJobDateFiltersInput
  endDate: ComponentJobsJobDateFiltersInput
  descriptionBullets: ComponentJobsDescriptionBulletFiltersInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [JobFiltersInput]
  or: [JobFiltersInput]
  not: JobFiltersInput
}

input JobInput {
  jobId: String
  companyName: String
  companyPageUrl: String
  position: String
  location: String
  startDate: ComponentJobsJobDateInput
  endDate: ComponentJobsJobDateInput
  descriptionBullets: [ComponentJobsDescriptionBulletInput]
}

type Job {
  jobId: String!
  companyName: String!
  companyPageUrl: String!
  position: String!
  location: String!
  startDate: ComponentJobsJobDate!
  endDate: ComponentJobsJobDate
  descriptionBullets(
    filters: ComponentJobsDescriptionBulletFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): [ComponentJobsDescriptionBullet]!
  createdAt: DateTime
  updatedAt: DateTime
}

type JobEntity {
  id: ID
  attributes: Job
}

type JobEntityResponse {
  data: JobEntity
}

type JobEntityResponseCollection {
  data: [JobEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_PROJECT_CATEGORY {
  develop
  photo
}

input ProjectFiltersInput {
  id: IDFilterInput
  projectId: StringFilterInput
  name: StringFilterInput
  description: StringFilterInput
  tags: TagFiltersInput
  externalUrl: StringFilterInput
  accentColor: StringFilterInput
  galleryAssets: AssetFiltersInput
  category: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [ProjectFiltersInput]
  or: [ProjectFiltersInput]
  not: ProjectFiltersInput
}

input ProjectInput {
  projectId: String
  name: String
  description: String
  tags: [ID]
  externalUrl: String
  accentColor: String
  logo: ID
  galleryAssets: [ID]
  category: ENUM_PROJECT_CATEGORY
  thumbnail: ID
}

type Project {
  projectId: String!
  name: String!
  description: String!
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagRelationResponseCollection
  externalUrl: String
  accentColor: String!
  logo: UploadFileEntityResponse!
  galleryAssets(
    filters: AssetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AssetRelationResponseCollection
  category: ENUM_PROJECT_CATEGORY
  thumbnail: UploadFileEntityResponse!
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectEntity {
  id: ID
  attributes: Project
}

type ProjectEntityResponse {
  data: ProjectEntity
}

type ProjectEntityResponseCollection {
  data: [ProjectEntity!]!
  meta: ResponseCollectionMeta!
}

enum ENUM_TAG_CATEGORY {
  develop
  photo
}

input TagFiltersInput {
  id: IDFilterInput
  tagId: StringFilterInput
  value: StringFilterInput
  category: StringFilterInput
  createdAt: DateTimeFilterInput
  updatedAt: DateTimeFilterInput
  and: [TagFiltersInput]
  or: [TagFiltersInput]
  not: TagFiltersInput
}

input TagInput {
  tagId: String
  value: String
  category: ENUM_TAG_CATEGORY
}

type Tag {
  tagId: String!
  value: String
  category: ENUM_TAG_CATEGORY
  createdAt: DateTime
  updatedAt: DateTime
}

type TagEntity {
  id: ID
  attributes: Tag
}

type TagEntityResponse {
  data: TagEntity
}

type TagEntityResponseCollection {
  data: [TagEntity!]!
  meta: ResponseCollectionMeta!
}

type TagRelationResponseCollection {
  data: [TagEntity!]!
}

union GenericMorph =
    ComponentJobsDescriptionBullet
  | ComponentJobsJobDate
  | UploadFile
  | I18NLocale
  | UsersPermissionsPermission
  | UsersPermissionsRole
  | UsersPermissionsUser
  | Article
  | ArticleThumbnail
  | Asset
  | Job
  | Project
  | Tag

input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input PaginationArg {
  page: Int
  pageSize: Int
  start: Int
  limit: Int
}

type Query {
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(
    filters: UploadFileFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UploadFileEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(
    filters: I18NLocaleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): I18NLocaleEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(
    filters: UsersPermissionsRoleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(
    filters: UsersPermissionsUserFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): UsersPermissionsUserEntityResponseCollection
  article(id: ID): ArticleEntityResponse
  articles(
    filters: ArticleFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ArticleEntityResponseCollection
  articleThumbnail(id: ID): ArticleThumbnailEntityResponse
  articleThumbnails(
    filters: ArticleThumbnailFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ArticleThumbnailEntityResponseCollection
  asset(id: ID): AssetEntityResponse
  assets(
    filters: AssetFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): AssetEntityResponseCollection
  job(id: ID): JobEntityResponse
  jobs(
    filters: JobFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): JobEntityResponseCollection
  project(id: ID): ProjectEntityResponse
  projects(
    filters: ProjectFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): ProjectEntityResponseCollection
  tag(id: ID): TagEntityResponse
  tags(
    filters: TagFiltersInput
    pagination: PaginationArg = {}
    sort: [String] = []
  ): TagEntityResponseCollection
  me: UsersPermissionsMe
}

type Mutation {
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  createArticle(data: ArticleInput!): ArticleEntityResponse
  updateArticle(id: ID!, data: ArticleInput!): ArticleEntityResponse
  deleteArticle(id: ID!): ArticleEntityResponse
  createArticleThumbnail(
    data: ArticleThumbnailInput!
  ): ArticleThumbnailEntityResponse
  updateArticleThumbnail(
    id: ID!
    data: ArticleThumbnailInput!
  ): ArticleThumbnailEntityResponse
  deleteArticleThumbnail(id: ID!): ArticleThumbnailEntityResponse
  createAsset(data: AssetInput!): AssetEntityResponse
  updateAsset(id: ID!, data: AssetInput!): AssetEntityResponse
  deleteAsset(id: ID!): AssetEntityResponse
  createJob(data: JobInput!): JobEntityResponse
  updateJob(id: ID!, data: JobInput!): JobEntityResponse
  deleteJob(id: ID!): JobEntityResponse
  createProject(data: ProjectInput!): ProjectEntityResponse
  updateProject(id: ID!, data: ProjectInput!): ProjectEntityResponse
  deleteProject(id: ID!): ProjectEntityResponse
  createTag(data: TagInput!): TagEntityResponse
  updateTag(id: ID!, data: TagInput!): TagEntityResponse
  deleteTag(id: ID!): TagEntityResponse
  upload(
    refId: ID
    ref: String
    field: String
    info: FileInfoInput
    file: Upload!
  ): UploadFileEntityResponse!
  multipleUpload(
    refId: ID
    ref: String
    field: String
    files: [Upload]!
  ): [UploadFileEntityResponse]!
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  removeFile(id: ID!): UploadFileEntityResponse

  # Create a new role
  createUsersPermissionsRole(
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsCreateRolePayload

  # Update an existing role
  updateUsersPermissionsRole(
    id: ID!
    data: UsersPermissionsRoleInput!
  ): UsersPermissionsUpdateRolePayload

  # Delete an existing role
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  # Create a new user
  createUsersPermissionsUser(
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Update an existing user
  updateUsersPermissionsUser(
    id: ID!
    data: UsersPermissionsUserInput!
  ): UsersPermissionsUserEntityResponse!

  # Delete an existing user
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

  # Register a user
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

  # Request a reset password token
  forgotPassword(email: String!): UsersPermissionsPasswordPayload

  # Reset user password. Confirm with a code (resetToken from forgotPassword)
  resetPassword(
    password: String!
    passwordConfirmation: String!
    code: String!
  ): UsersPermissionsLoginPayload

  # Confirm an email users email address
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
